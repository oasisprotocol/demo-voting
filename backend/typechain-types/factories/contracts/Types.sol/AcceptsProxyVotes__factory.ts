/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  AcceptsProxyVotes,
  AcceptsProxyVotesInterface,
} from "../../../contracts/Types.sol/AcceptsProxyVotes";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "ipfsHash",
            type: "string",
          },
          {
            internalType: "uint16",
            name: "numChoices",
            type: "uint16",
          },
          {
            internalType: "bool",
            name: "publishVotes",
            type: "bool",
          },
        ],
        internalType: "struct ProposalParams",
        name: "_params",
        type: "tuple",
      },
    ],
    name: "createProposal",
    outputs: [
      {
        internalType: "ProposalId",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getACL",
    outputs: [
      {
        internalType: "contract PollACLv1",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "ProposalId",
        name: "proposalId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "choiceIdBig",
        type: "uint256",
      },
    ],
    name: "proxyVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class AcceptsProxyVotes__factory {
  static readonly abi = _abi;
  static createInterface(): AcceptsProxyVotesInterface {
    return new utils.Interface(_abi) as AcceptsProxyVotesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AcceptsProxyVotes {
    return new Contract(address, _abi, signerOrProvider) as AcceptsProxyVotes;
  }
}
