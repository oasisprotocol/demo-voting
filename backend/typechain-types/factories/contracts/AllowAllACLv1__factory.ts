/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AllowAllACLv1,
  AllowAllACLv1Interface,
} from "../../contracts/AllowAllACLv1";

const _abi = [
  {
    inputs: [],
    name: "ACLManagementNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "PollCreationNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "PollManagementNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "VoteNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "canCreatePoll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "ProposalId",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "canManagePoll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "ProposalId",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "canVoteOnPoll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address",
      },
      {
        internalType: "ProposalId",
        name: "proposalId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "onPollCreated",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761011f908161001c8239f35b600080fdfe60806040526004361015601157600080fd5b6000803560e01c806356d15dc814608257806385e3f91914608a578063e53626671460825763ff6fef7d146045575b600080fd5b34607b576040366003190112607b576001600160a01b0360043581811603607e5760243590811603607b57602060405160018152f35b80fd5b5080fd5b5050604060cf565b5034607b57609636609e565b505050604051f35b60609060031901126040576001600160a01b0360043581811681036040579160243591604435908116810360405790565b503460405760db36609e565b505050602060405160018152f3fea2646970667358221220cf7e93e78aa4bc92124a192929c12c65bcf966963fa9955e19c9feea1a942ff064736f6c63430008100033";

type AllowAllACLv1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AllowAllACLv1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AllowAllACLv1__factory extends ContractFactory {
  constructor(...args: AllowAllACLv1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AllowAllACLv1> {
    return super.deploy(overrides || {}) as Promise<AllowAllACLv1>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AllowAllACLv1 {
    return super.attach(address) as AllowAllACLv1;
  }
  override connect(signer: Signer): AllowAllACLv1__factory {
    return super.connect(signer) as AllowAllACLv1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AllowAllACLv1Interface {
    return new utils.Interface(_abi) as AllowAllACLv1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AllowAllACLv1 {
    return new Contract(address, _abi, signerOrProvider) as AllowAllACLv1;
  }
}
